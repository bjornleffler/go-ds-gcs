# Basic IPFS deployment. Tested to work with GKE.

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Please note:
# The GKE K8s node pool MUST be configured with write permission to GCS.
# The scope of "Storage read/write" is
# https://www.googleapis.com/auth/devstorage.read_write

# The deployment and service below deploy in the 'mynamespace' namespace.
# Create the namespace first using:
#   kubectl create namespace mynamespace

# Instructions to users of this file:
# 1. Update 'repository' to your repository.
# 2. Update 'mynamespace' to a name of your choise.
#    Or remove it if you don't want to use namespaces.

# IPFS deployment in GKE.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ipfs
  namespace: mynamespace
  labels:
    app: ipfs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ipfs
  template:
    metadata:
      labels:
        app: ipfs
    spec:
      containers:
        - name: ipfs
          image: gcr.io/repository/ipfs
          imagePullPolicy: Always
          command: ["/entrypoint"]
          # All ports configured, but may not be exposed.
          # See the "Addresses" section of the IPFS config for details.
          ports:
          - containerPort: 8080
            name: gateway
          - containerPort: 4001
            name: swarm
          - containerPort: 5001
            name: admin
          # To specify a particular bucket or project, use:
          # args: ["-bucket", "mybucket"]
          # args: ["-project", "myproject"]
          args: []
---
# IPFS service in GKE.
# This allows any pod in the GKE cluster to communicate with the IPFS server / gateway.
# For example, to fetch HASH from another pod in the GKE cluster:
#   curl http://ipfs.mynamespace:8080/ipfs/HASH
apiVersion: v1
kind: Service
metadata:
  name: ipfs
  namespace: mynamespace
spec:
  selector:
    app: ipfs
  # All ports configured, but may not be exposed.
  # See the "Addresses" section of the IPFS config for details.
  ports:
    - name: swarm
      protocol: TCP
      port: 4001
    - name: admin
      protocol: TCP
      port: 5001
    - name: gateway
      protocol: TCP
      port: 8080
